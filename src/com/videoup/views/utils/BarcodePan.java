/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.videoup.views.utils;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.geom.AffineTransform;
import org.krysalis.barcode4j.BarcodeClassResolver;
import org.krysalis.barcode4j.BarcodeDimension;
import org.krysalis.barcode4j.BarcodeGenerator;
import org.krysalis.barcode4j.DefaultBarcodeClassResolver;
import org.krysalis.barcode4j.impl.AbstractBarcodeBean;
import org.krysalis.barcode4j.output.java2d.Java2DCanvasProvider;

/**
 *
 * @author Pedro
 */
public class BarcodePan extends javax.swing.JPanel {
   
    private BarcodeClassResolver cresolv;
    private BarcodeGenerator bargen;
    private Java2DCanvasProvider canvas;
    private String bcode;
    private String error;

    /**
     * Creates new form BarcodePan
     */
    public BarcodePan() {
        initComponents();
        bargen=null; bcode=null;
    }
    
    public void setCode(String value, String type) {
        removeAll();
        try{
            bcode=value;
            type=type.toLowerCase().replace(" ", "");
            cresolv=new DefaultBarcodeClassResolver();
            Class selc = cresolv.resolveBean(type);
            bargen=(AbstractBarcodeBean)selc.newInstance();
            error=null;
        }catch(Exception someEx){ 
            bargen=null; error=someEx.getMessage();
            //someEx.printStackTrace();
        }
        repaint();
    }
    
    @Override
    public void paint(Graphics g) {
        if (bargen==null){ super.paint(g); }
        else{
            Graphics2D g2d = (Graphics2D)g;
            Font textFont;
            FontMetrics textMetrics;
            int centeredX;
            int centeredY;
            BarcodeDimension bcdim;
            canvas=new Java2DCanvasProvider(g2d, 0);
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);
            try{
                AffineTransform baktrans = g2d.getTransform();
                try{
                    bcdim=bargen.calcDimensions(bcode);
                    double horzScale=getWidth()/bcdim.getWidthPlusQuiet();
                    double vertScale=getHeight()/bcdim.getHeightPlusQuiet();
                    double scale;
                    double dx = 0;
                    double dy = 0;
                    if (horzScale < vertScale) {
                        scale = horzScale;
                        dy = ((getHeight() / scale) - bcdim.getHeightPlusQuiet()) / 2;
                    } else {
                        scale = vertScale;
                        dx = ((getWidth() / scale) - bcdim.getWidthPlusQuiet()) / 2;
                    }
                    g2d.scale(scale, scale); //scale for mm to screen pixels
                    g2d.translate(dx, dy); //center
                    g2d.setColor(Color.BLACK);
                    g2d.setBackground(Color.WHITE);
                    g2d.clearRect(-100, -100, getHeight()+100, getWidth()+100);
                    canvas.setGraphics2D(g2d);
                    bargen.generateBarcode(canvas,bcode);
                    error=null;
                }catch(Exception someEx){
                    error=someEx.getMessage();
                    textFont=new Font("Arial", Font.BOLD, 12);
                    textMetrics=g2d.getFontMetrics(textFont);
                    centeredX=(this.getWidth()/2) - (textMetrics.stringWidth(error)/2);
                    centeredY=(this.getHeight()/2) + (textMetrics.getHeight()/2);
                    g2d.setFont(textFont); 
                    g2d.setBackground(Color.YELLOW);
                    g2d.setColor(Color.RED);
                    g2d.clearRect(-100, -100, getHeight()+100, getWidth()+100);
                    g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);  
                    g2d.drawString(error,centeredX,centeredY);
                    //someEx.printStackTrace();
                }finally{
                    g2d.setTransform(baktrans);
                }
            }catch(Exception someEx){
                bargen=null; removeAll(); error=someEx.getMessage();
                //someEx.printStackTrace();
            }
        }
    }
    
    public String hasError(){ 
        //if(error bcode==null || bcode==null){}
        return error; 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        setLayout(null);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
