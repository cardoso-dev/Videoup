/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.videoup.views.utils;

import com.videoup.controllers.Controller;
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeMap;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import layout.TableLayout;

/**
 *
 * @author Pedro
 */
public class ViewsSelector extends View{

    private TreeMap<Integer,RowItem> opts;
    
    /**
     * Creates new form ViewsSelector
     */
    public ViewsSelector(Controller ctrller,String title,ImageIcon ico) {
        super(ctrller,-2);
        initComponents();
        opts=new TreeMap<Integer,RowItem>();
        jlblTitle.setText(title);
        jlblTitle.setIcon(ico);
        reBuildLayout();
    }

    public void removeObtnNew(){
        if(btnNew!=null){
            pnlTitle.remove(btnNew);
            btnNew=null;            
        }
    }
    
    private void reBuildLayout(){
        double scols[]={0.02,0.96,0.02};
        double srows[]=new double[3+(opts.size()*2)];
        double scells[][];
        String constr;
        int row;
        TableLayout tly;
        Set<Integer> keys;
        Iterator<Integer> iter;
        srows[0]=9; srows[1]=TableLayout.PREFERRED; srows[2]=13;
        for(row=0;row<(opts.size()*2);row+=2){ srows[row+3]=TableLayout.PREFERRED; srows[row+4]=7; }
        scells=new double[][]{scols,srows};
        tly=new TableLayout(scells);
        pnlMenu.removeAll(); pnlMenu.setLayout(tly);
        keys=opts.keySet();
        iter=keys.iterator(); row=3;
        pnlMenu.add(pnlTitle, "1, 1, f, f");
        while(iter.hasNext()){
            constr="1, "+row+", f, f"; row+=2;
            pnlMenu.add(opts.get(iter.next()), constr);
        }
        pnlMenu.validate();
    }
    
    public void addOption(String name, int key, boolean closable){
        int bKey=buildBKey(ctrl.getIdCtrl(),key);
        RowItem nJlbl = new RowItem(name,key,closable);
        opts.put(bKey, nJlbl); reBuildLayout();
    }
    
    public void addOption(Controller ctl, String name, int key, boolean closable){
        int bKey=buildBKey(ctl.getIdCtrl(),key);
        RowItem nJlbl = new RowItem(name,key,closable);
        nJlbl.setController(ctl);
        opts.put(bKey, nJlbl); reBuildLayout();
    }
    
    public void removeView(int idc, int k){
        int bKey=buildBKey(idc,k);
        RowItem aJlbl=opts.get(bKey);
        if(aJlbl==null){ return; }
        if(aJlbl.isClosable()){
            pnlMenu.remove(opts.get(bKey));
            opts.remove(bKey);
            setVisible(false); reBuildLayout(); setVisible(true);
        }
    }
    
    public void changeClosable(int idc, int k, boolean closbl){
        int bKey=buildBKey(idc,k);
        RowItem aJlbl=opts.get(bKey);
        if(aJlbl==null){ return; }
        aJlbl.setClosable(closbl);
    }
    
    public String getNameView(int idc, int k){
        int bKey=buildBKey(idc,k);
        return ((RowItem)opts.get(bKey)).getText();
    }
    
    private void change2View(int k, Controller cCtl){
        if(cCtl!=null){
            cCtl.goToView(k,true);
        }else{
            ctrl.goToView(k,true);
        }
    }
    
    public void try2CloseView(int k, Controller cCtl){
        RowItem aJlbl;
        boolean closed;
        if(cCtl!=null){
            aJlbl=opts.get(buildBKey(cCtl.getIdCtrl(),k));
            closed=cCtl.try2CloseView(k,aJlbl.isClosable());
        }else{
            aJlbl=opts.get(buildBKey(ctrl.getIdCtrl(),k));
            closed=ctrl.try2CloseView(k,aJlbl.isClosable());
        }
        if(!closed){ }
        else if(opts.isEmpty()){ closeMe(); }
    }
    
    public boolean isCloseView(int idc, int k){
        int bKey=buildBKey(idc,k);
        RowItem aJlbl=opts.get(bKey);
        return aJlbl.isClosable();
    }
    
    private int buildBKey(int idc, int k){
        int bk=idc*1000;
        bk+=Math.abs(k);
        if(k<0){
            bk*=-1;
        }
        return bk;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        pnlMenu = new javax.swing.JPanel();
        pnlTitle = new javax.swing.JPanel();
        jlblTitle = new javax.swing.JLabel();
        btnNew = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        pnlMenu.setLayout(null);

        pnlTitle.setBackground(new java.awt.Color(90, 135, 179));
        pnlTitle.setLayout(new java.awt.BorderLayout());

        jlblTitle.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jlblTitle.setForeground(new java.awt.Color(255, 255, 255));
        jlblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jlblTitle.setText("Titulo");
        pnlTitle.add(jlblTitle, java.awt.BorderLayout.CENTER);

        btnNew.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/videoup/imgs/nuevo.png"))); // NOI18N
        btnNew.setToolTipText("");
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });
        pnlTitle.add(btnNew, java.awt.BorderLayout.EAST);

        pnlMenu.add(pnlTitle);
        pnlTitle.setBounds(0, 0, 94, 41);

        jScrollPane1.setViewportView(pnlMenu);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        ctrl.loadNewFicha();
    }//GEN-LAST:event_btnNewActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNew;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlblTitle;
    private javax.swing.JPanel pnlMenu;
    private javax.swing.JPanel pnlTitle;
    // End of variables declaration//GEN-END:variables

    private class RowItem extends JPanel{
        private int key;
        private JButton text;
        private JButton close;
        private boolean closable;
        private Controller ctl;
        public RowItem(String n,int key,boolean closable){
            this.closable=closable;
            this.key=key;
            ctl=null;
            setLayout(new BorderLayout());
            setBackground(new java.awt.Color(255, 255, 255));
            text=new JButton(prepareText(n));
            add(text,BorderLayout.CENTER);
            text.addActionListener(new java.awt.event.ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    change2View(getKey(),ctl);
                }
            });
            if(closable){
                close=new JButton(" X ");
                close.setToolTipText( prepareText("Cerrar "+n) );
                add(close,BorderLayout.EAST);
                close.addActionListener(new java.awt.event.ActionListener(){
                    @Override
                    public void actionPerformed(ActionEvent e) {
                        removeMe();
                    }
                });
            }
        }
        public void setText(String tx){ text.setText(prepareText(tx)); }
        private String prepareText(String tx){
            int max=16;
            String[] txs;
            String row="";
            if(tx.length()>max){
                txs=tx.split(" ");
                tx="<html>";
                for(int g=0;g<txs.length;g++){
                    if(txs[g].length()>=max){
                        if(row.length()>0){ tx+=row+"<br />"; }
                        tx+=txs[g]+"<br />";
                        row="";
                    }else if(row.length()+txs[g].length()<=max){
                        row+=txs[g]+" ";
                    }else if(row.length()+txs[g].length()>max){
                        if(row.length()>0){ tx+=row+"<br />"; }
                        row=txs[g]+" ";
                    }
                }
                tx+=(row.length()>0?row:"")+"</html>";
            }
            return tx;
        }
        public String getText(){ return text.getText(); }
        public int getKey(){ return key; }
        public boolean isClosable(){ return closable; }
        public void setClosable(boolean c){ closable=c; }
        private void removeMe(){ try2CloseView(getKey(),ctl); }
        public void setController(Controller ctl){ this.ctl=ctl; }
    }
}
